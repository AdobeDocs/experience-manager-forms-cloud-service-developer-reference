---
openapi: 3.0.3
info:
  description: |
    The Document Utilities Synchronous APIs (PDF Utilities Service) provide ability to generate, convert, transform, and extract information from PDF and XDP file formats.

    # Download the definition file
    The API reference documentation is also available in the .yaml format. You can [download the .yaml for synchronous APIs](https://github.com/AdobeDocs/experience-manager-forms-cloud-service-developer-reference/blob/main/src/swagger-specs/pdf-utility-sync.yaml) and upload it to postman to check functionality of the APIs.
  
  title: Document Utilities Synchronous APIs (PDF Utilities Service)
  version: 1.0.0
servers:
  - url: https://aemforms.adobe.io
    description: AEM Forms - Communications
tags:
  - name: Document Information
    description: APIs that provide information about PDF / XDP documents.
  - name: Document Conversion
    description: APIs that convert one type of documents into another
x-tagGroups:
  - name: AEM Forms - Communications API
    tags:
      - Document Information
      - Document Conversion
  - name: Models
    tags:
      - PDFPropertiesRequest
      - PDFPropertiesResponse
security:
  - BearerAuth: []
paths:
  /adobe/forms/docservices/pdfutil/getPDFProperties:
    post:
      tags:
        - Document Information
      summary: Gets the properties of a PDF document.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/GetPDFProperties"
            encoding:
              inPDFDoc:
                contentType: text/plain, application/pdf
              options:
                contentType: application/json
      responses:
        200:
          description: Operation successful. The properties of the supplied PDF document are included in the response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDFPropertiesResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        408:
          $ref: "#/components/responses/TimedOut"
        500:
          $ref: "#/components/responses/InternalError"
  /adobe/forms/docservices/pdfutil/convertPDFtoXDP:
    post:
      tags:
        - Document Conversion
      summary: Converts a PDF document to an XDP.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ConvertPDF"
            encoding:
              inPDFDoc:
                contentType: text/plain, application/pdf
      responses:
        200:
          description: |
            Operation successful. The XDP obtained after converting the supplied PDF document is included in the response.
          content:
            application/vnd.adobe.xdp+xml:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        408:
          $ref: "#/components/responses/TimedOut"
        500:
          $ref: "#/components/responses/InternalError"
components:
  schemas:
    Error:
      description: |
        RFC 7807 compliant problem details.
      type: object
      properties:
        type:
          type: string
          description: |
            A URI reference that identifies the problem type
            and points to human-readable documentation.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: |
            The HTTP status code generated by the origin server.
        detail:
          type: string
          description: |
            A human-readable explanation of this occurrence.
        instance:
          type: string
          description: |
            A URI reference that identifies the specific occurrence of the problem.
    GetPDFProperties:
      type: object
      required:
        - inPDFDoc
      properties:
        inPDFDoc:
          description: |
            A PDF whose properties are to be fetched.
            You can specify an absolute HTTPS URL or a binary file.
          oneOf:
            - type: string
              format: binary
            - type: string
        options:
          $ref: "#/components/schemas/PDFPropertiesRequest"
    ConvertPDF:
      required:
        - inPDFDoc
      type: object
      properties:
        inPDFDoc:
          description: |
            A PDF which needs to be converted to XDP.
            You can specify an absolute HTTPS URL or a binary file.
          oneOf:
            - type: string
              format: binary
            - type: string
    PDFPropertiesRequest:
      description: |
        The properties of the supplied PDF document that are to be fetched.
      type: object
      properties:
        checkIsPDFDocument:
          type: boolean
          description: |
            Check whether the document is a PDF
        checkIsFillableForm:
          type: boolean
          description: |
            Check whether the document is a fillable form
        getFormType:
          type: boolean
          description: |
            Get the form type of the document
        checkHasAttachments:
          type: boolean
          description: |
            Check whether the document has any attachments
        checkHasComments:
          type: boolean
          description: |
            Check whether the document has comments
        checkIsPDFPackage:
          type: boolean
          description: |
            Check whether the document is a PDF package
        getPDFVersion:
          type: boolean
          description: |
            Get the PDF version of the document
        getAcrobatVersion:
          type: boolean
          description: |
            Get the Acrobat (or Reader) version needed to correctly view the document
        checkIsXFADocument:
          type: boolean
          description: |
            Check whether the document is an XFA PDF
        checkIsShellPDF:
          type: boolean
          description: |
            Check whether the document is a shell PDF
        getXFAVersion:
          type: boolean
          description: |
            Get the XFA version of the document
    PDFPropertiesResponse:
      description: |
        The requested properties of the supplied PDF document.
      type: object
      properties:
        isLocked:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is locked
        isPDFDocument:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a PDF
        isPDFPackage:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a PDF package
        pdfVersion:
          type: string
          nullable: true
          description: |
            The PDF version of the document
        hasAttachments:
          type: boolean
          nullable: true
          description: |
            Returns whether the document has any attachments
        hasComments:
          type: boolean
          nullable: true
          description: |
            Returns whether the document has any comments
        acrobatVersion:
          type: string
          nullable: true
          description: |
            The Acrobat (or Reader) version needed to correctly view the document
        formType:
          type: string
          nullable: true
          enum:
          - NotAForm
          - Acroform
          - Static-XFA
          - Dynamic-XFA
          - XFAForeground
          - null
          description: |
            The form type of the document
        isAcroForm:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is an Acroform
        isFillableForm:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a fillable form
        isXFADocument:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is an XFA PDF
        isShellPDF:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a shell PDF
        xfaVersion:
          type: string
          nullable: true
          description: |
            The XFA version of the document
  responses:
    BadRequest:
      description: Bad request. The request was invalid or cannot be served.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden. Please check your permissions.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalError:
      description: Internal server error. The server has encountered an error and is unable to process your request at this time.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    TimedOut:
      description: Request timed out. An operation has timed out on the client.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        An access token (Bearer authentication token) that is authorized to call the AEM Forms - Communications APIs is
        required to make authenticated requests to the Document Utilities Synchronous APIs (PDF Utility Service).
        
        To set up authentication, create a project in Adobe Developer Console and add Communication APIs to the project on Adobe Developer Console. The integration generates API Key, Client Secret, Payload (JWT):

        1. create a project in Adobe Developer Console and add Communication APIs to the project on Adobe Developer Console. The integration generates API Key, Client Secret, Payload (JWT):
        1. Contact you Adobe Developer Console administrator. Ask the administrator to add as a developer. 
        1. Log in to `https://developer.adobe.com/console/`. Use your developer account that your administrator has provisioned to login to Adobe Developer Console.
        1. Select your organization from the top-right corner. If you do not know your organization, contact your administrator.
        1. Tap **[!UICONTROL Create new project]**. A screen to get started with your new project appears. Tap **[!UICONTROL Add API]**. A screen with list of all the APIs enabled for your account appears.
        1. Select **[!UICONTROL AEM Forms - Communications]** and tap **[!UICONTROL Next]**. A screen to configure the API appears.
        1. Select **[!UICONTROL OPTION 1 Generate a key pair]** and tap **[!UICONTROL Generate keypair]**. It creates and downloads the configuration file. The downloaded configuration file contains all your app settings, along with the only copy of your private key. Adobe does not record your private key, make sure to securely store the downloaded file. Tap **[!UICONTROL Next]**.
        1. Select **[!UICONTROL Integrations - Cloud Service]** and tap **[!UICONTROL Save configured API]**.
        1. Tap **[!UICONTROL Service Account (JWT)]** to view the API Key, Client Secret, and other information required to access the APIs. 
        1. [Generate a JWT token and exchange it with Adobe IMS APIs for an access token](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?#create-a-jwt-and-exchange-for-an-access-token) to access the APIs.
