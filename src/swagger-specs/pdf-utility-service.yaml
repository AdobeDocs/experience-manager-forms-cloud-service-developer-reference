---
openapi: 3.0.3
info:
  description: |
    The PDFUtility service can be used to perform operations on a PDF document.
    It can convert an eligible PDF document to an XDP file and query information about a PDF document.
    Before converting a PDF document to another format, it could be useful to inspect its properties to determine which service operation to invoke for the conversion.
    For example, the service can be used to determine whether a PDF document contains comments or attachments.
  title: PDFUtility Service
  version: 0.0.1-experimental
servers:
  - url: http://ethos.server.url/adobe/forms/pdfutil/
    description: PDFUtility API Playground
tags:
  - name: PDFUtility Services
    description: Services offered by PDFUtility
x-tagGroups:
  - name: Services
    tags:
      - PDFUtility Services
  - name: Models
    tags:
      - PDFPropertiesRequest
      - PDFPropertiesResponse
security:
  - BearerAuth: []
paths:
  /getPDFProperties:
    post:
      tags:
        - PDFUtility Services
      summary: Gets the properties of a PDF document.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/GetPDFProperties"
            encoding:
              inPDFDoc:
                contentType: text/plain, application/pdf
              options:
                contentType: application/json
      responses:
        200:
          description: Operation successful. The properties of the supplied PDF document are included in the response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDFPropertiesResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        408:
          $ref: "#/components/responses/TimedOut"
        500:
          $ref: "#/components/responses/InternalError"
  /convertPDFtoXDP:
    post:
      tags:
        - PDFUtility Services
      summary: Converts a PDF document to an XDP.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ConvertPDF"
            encoding:
              inPDFDoc:
                contentType: text/plain, application/pdf
      responses:
        200:
          description: |
            Operation successful. The XDP obtained after converting the supplied PDF document is included in the response.
          content:
            application/vnd.adobe.xdp+xml:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        408:
          $ref: "#/components/responses/TimedOut"
        500:
          $ref: "#/components/responses/InternalError"
components:
  schemas:
    Error:
      description: |
        RFC 7807 compliant problem details.
      type: object
      properties:
        type:
          type: string
          description: |
            A URI reference that identifies the problem type
            and points to human-readable documentation.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: |
            The HTTP status code generated by the origin server.
        detail:
          type: string
          description: |
            A human-readable explanation of this occurrence.
        instance:
          type: string
          description: |
            A URI reference that identifies the specific occurrence of the problem.
    GetPDFProperties:
      type: object
      required:
        - inPDFDoc
      properties:
        inPDFDoc:
          description: |
            A PDF whose properties are to be fetched.
            You can specify an absolute HTTP(S) URL or a binary file.
          oneOf:
            - type: string
              format: binary
            - type: string
        options:
          $ref: "#/components/schemas/PDFPropertiesRequest"
    ConvertPDF:
      required:
        - inPDFDoc
      type: object
      properties:
        inPDFDoc:
          description: |
            A PDF which needs to be converted to XDP.
            You can specify an absolute HTTP(S) URL or a binary file.
          oneOf:
            - type: string
              format: binary
            - type: string
    PDFPropertiesRequest:
      description: |
        The properties of the supplied PDF document that are to be fetched.
      type: object
      properties:
        checkIsPDFDocument:
          type: boolean
          description: |
            Check whether the document is a PDF
        checkIsFillableForm:
          type: boolean
          description: |
            Check whether the document is a fillable form
        getFormType:
          type: boolean
          description: |
            Get the form type of the document
        checkHasAttachments:
          type: boolean
          description: |
            Check whether the document has any attachments
        checkHasComments:
          type: boolean
          description: |
            Check whether the document has comments
        checkIsPDFPackage:
          type: boolean
          description: |
            Check whether the document is a PDF package
        getPDFVersion:
          type: boolean
          description: |
            Get the PDF version of the document
        getAcrobatVersion:
          type: boolean
          description: |
            Get the Acrobat (or Reader) version needed to correctly view the document
        checkIsXFADocument:
          type: boolean
          description: |
            Check whether the document is an XFA PDF
        checkIsShellPDF:
          type: boolean
          description: |
            Check whether the document is a shell PDF
        getXFAVersion:
          type: boolean
          description: |
            Get the XFA version of the document
    PDFPropertiesResponse:
      description: |
        The requested properties of the supplied PDF document.
      type: object
      properties:
        isLocked:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is locked
        isPDFDocument:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a PDF
        isPDFPackage:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a PDF package
        pdfVersion:
          type: string
          nullable: true
          description: |
            The PDF version of the document
        hasAttachments:
          type: boolean
          nullable: true
          description: |
            Returns whether the document has any attachments
        hasComments:
          type: boolean
          nullable: true
          description: |
            Returns whether the document has any comments
        acrobatVersion:
          type: string
          nullable: true
          description: |
            The Acrobat (or Reader) version needed to correctly view the document
        formType:
          type: string
          nullable: true
          enum:
          - NotAForm
          - Acroform
          - Static-XFA
          - Dynamic-XFA
          - XFAForeground
          - null
          description: |
            The form type of the document
        isAcroForm:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is an Acroform
        isFillableForm:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a fillable form
        isXFADocument:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is an XFA PDF
        isShellPDF:
          type: boolean
          nullable: true
          description: |
            Returns whether the document is a shell PDF
        xfaVersion:
          type: string
          nullable: true
          description: |
            The XFA version of the document
  responses:
    BadRequest:
      description: Bad request. The request was invalid or cannot be served.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden. Please check your permissions.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalError:
      description: Internal server error. The server has encountered an error and is unable to process your request at this time.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    TimedOut:
      description: Request timed out. An operation has timed out on the client.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        In token-based authentication, an access token (Bearer authentication token) is required to make requests to AEM as a Cloud Service.
        AEM Forms as a Cloud Service provides APIs to securely retrieve the access token.
        The end-to-end workflow for retrieving and using the token to authenticate a request is:

        - [Retrieve AEM as a Cloud Service credential from the Developer
        Console.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en)

        - [Install AEM as a Cloud Service credential on your
        environment.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en)
        (Application Server, Web Server, or other non-AEM servers) configured to
        send requests to (make calls) the cloud service.

        - [Generate a JWT token and exchanged it with Adobe IMS APIs for an
        access
        token.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en#create-a-jwt-and-exchange-for-an-access-token)

        - Run the AEM API with the access token as a Bearer Authentication
        token.

        - [Set appropriate permissions for the technical account user in the AEM
        environment.](https://experienceleague.adobe.com/docs/experience-manager-learn/getting-started-with-aem-headless/authentication/service-credentials.html?lang=en#configure-access-in-aem)